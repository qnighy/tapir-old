#include <ruby.h>

#include "rpg_rb.h"

void InitRPG() {
  // 00_rpg.rb
  rb_eval_string(
    "module RPG\n"
    "end\n"
    );
  // 01_rpg_map.rb
  rb_eval_string(
    "class RPG::Map\n"
    "  def initialize(width, height)\n"
    "    @display_name = ''\n"
    "    @tileset_id = 1\n"
    "    @width = width\n"
    "    @height = height\n"
    "    @scroll_type = 0\n"
    "    @specify_battleback = false\n"
    "    @battleback_floor_name = ''\n"
    "    @battleback_wall_name = ''\n"
    "    @autoplay_bgm = false\n"
    "    @bgm = RPG::BGM.new\n"
    "    @autoplay_bgs = false\n"
    "    @bgs = RPG::BGS.new('', 80)\n"
    "    @disable_dashing = false\n"
    "    @encounter_list = []\n"
    "    @encounter_step = 30\n"
    "    @parallax_name = ''\n"
    "    @parallax_loop_x = false\n"
    "    @parallax_loop_y = false\n"
    "    @parallax_sx = 0\n"
    "    @parallax_sy = 0\n"
    "    @parallax_show = false\n"
    "    @note = ''\n"
    "    @data = Table.new(width, height, 4)\n"
    "    @events = {}\n"
    "  end\n"
    "  attr_accessor :display_name\n"
    "  attr_accessor :tileset_id\n"
    "  attr_accessor :width\n"
    "  attr_accessor :height\n"
    "  attr_accessor :scroll_type\n"
    "  attr_accessor :specify_battleback\n"
    "  attr_accessor :battleback1_name\n"
    "  attr_accessor :battleback2_name\n"
    "  attr_accessor :autoplay_bgm\n"
    "  attr_accessor :bgm\n"
    "  attr_accessor :autoplay_bgs\n"
    "  attr_accessor :bgs\n"
    "  attr_accessor :disable_dashing\n"
    "  attr_accessor :encounter_list\n"
    "  attr_accessor :encounter_step\n"
    "  attr_accessor :parallax_name\n"
    "  attr_accessor :parallax_loop_x\n"
    "  attr_accessor :parallax_loop_y\n"
    "  attr_accessor :parallax_sx\n"
    "  attr_accessor :parallax_sy\n"
    "  attr_accessor :parallax_show\n"
    "  attr_accessor :note\n"
    "  attr_accessor :data\n"
    "  attr_accessor :events\n"
    "end\n"
    );
  // 02_rpg_map_encounter.rb
  rb_eval_string(
    "class RPG::Map::Encounter\n"
    "  def initialize\n"
    "    @troop_id = 1\n"
    "    @weight = 10\n"
    "    @region_set = []\n"
    "  end\n"
    "  attr_accessor :troop_id\n"
    "  attr_accessor :weight\n"
    "  attr_accessor :region_set\n"
    "end\n"
    );
  // 03_rpg_mapinfo.rb
  rb_eval_string(
    "class RPG::MapInfo\n"
    "  def initialize\n"
    "    @name = ''\n"
    "    @parent_id = 0\n"
    "    @order = 0\n"
    "    @expanded = false\n"
    "    @scroll_x = 0\n"
    "    @scroll_y = 0\n"
    "  end\n"
    "  attr_accessor :name\n"
    "  attr_accessor :parent_id\n"
    "  attr_accessor :order\n"
    "  attr_accessor :expanded\n"
    "  attr_accessor :scroll_x\n"
    "  attr_accessor :scroll_y\n"
    "end\n"
    );
  // 04_rpg_event.rb
  rb_eval_string(
    "class RPG::Event\n"
    "  def initialize(x, y)\n"
    "    @id = 0\n"
    "    @name = ''\n"
    "    @x = x\n"
    "    @y = y\n"
    "    @pages = [RPG::Event::Page.new]\n"
    "  end\n"
    "  attr_accessor :id\n"
    "  attr_accessor :name\n"
    "  attr_accessor :x\n"
    "  attr_accessor :y\n"
    "  attr_accessor :pages\n"
    "end\n"
    );
  // 05_rpg_event_page.rb
  rb_eval_string(
    "class RPG::Event::Page\n"
    "  def initialize\n"
    "    @condition = RPG::Event::Page::Condition.new\n"
    "    @graphic = RPG::Event::Page::Graphic.new\n"
    "    @move_type = 0\n"
    "    @move_speed = 3\n"
    "    @move_frequency = 3\n"
    "    @move_route = RPG::MoveRoute.new\n"
    "    @walk_anime = true\n"
    "    @step_anime = false\n"
    "    @direction_fix = false\n"
    "    @through = false\n"
    "    @priority_type = 0\n"
    "    @trigger = 0\n"
    "    @list = [RPG::EventCommand.new]\n"
    "  end\n"
    "  attr_accessor :condition\n"
    "  attr_accessor :graphic\n"
    "  attr_accessor :move_type\n"
    "  attr_accessor :move_speed\n"
    "  attr_accessor :move_frequency\n"
    "  attr_accessor :move_route\n"
    "  attr_accessor :walk_anime\n"
    "  attr_accessor :step_anime\n"
    "  attr_accessor :direction_fix\n"
    "  attr_accessor :through\n"
    "  attr_accessor :priority_type\n"
    "  attr_accessor :trigger\n"
    "  attr_accessor :list\n"
    "end\n"
    );
  // 06_rpg_event_page_condition.rb
  rb_eval_string(
    "class RPG::Event::Page::Condition\n"
    "  def initialize\n"
    "    @switch1_valid = false\n"
    "    @switch2_valid = false\n"
    "    @variable_valid = false\n"
    "    @self_switch_valid = false\n"
    "    @item_valid = false\n"
    "    @actor_valid = false\n"
    "    @switch1_id = 1\n"
    "    @switch2_id = 1\n"
    "    @variable_id = 1\n"
    "    @variable_value = 0\n"
    "    @self_switch_ch = 'A'\n"
    "    @item_id = 1\n"
    "    @actor_id = 1\n"
    "  end\n"
    "  attr_accessor :switch1_valid\n"
    "  attr_accessor :switch2_valid\n"
    "  attr_accessor :variable_valid\n"
    "  attr_accessor :self_switch_valid\n"
    "  attr_accessor :item_valid\n"
    "  attr_accessor :actor_valid\n"
    "  attr_accessor :switch1_id\n"
    "  attr_accessor :switch2_id\n"
    "  attr_accessor :variable_id\n"
    "  attr_accessor :variable_value\n"
    "  attr_accessor :self_switch_ch\n"
    "  attr_accessor :item_id\n"
    "  attr_accessor :actor_id\n"
    "end\n"
    );
  // 07_rpg_event_page_graphic.rb
  rb_eval_string(
    "class RPG::Event::Page::Graphic\n"
    "  def initialize\n"
    "    @tile_id = 0\n"
    "    @character_name = ''\n"
    "    @character_index = 0\n"
    "    @direction = 2\n"
    "    @pattern = 0\n"
    "  end\n"
    "  attr_accessor :tile_id\n"
    "  attr_accessor :character_name\n"
    "  attr_accessor :character_index\n"
    "  attr_accessor :direction\n"
    "  attr_accessor :pattern\n"
    "end\n"
    );
  // 08_rpg_eventcommand.rb
  rb_eval_string(
    "class RPG::EventCommand\n"
    "  def initialize(code = 0, indent = 0, parameters = [])\n"
    "    @code = code\n"
    "    @indent = indent\n"
    "    @parameters = parameters\n"
    "  end\n"
    "  attr_accessor :code\n"
    "  attr_accessor :indent\n"
    "  attr_accessor :parameters\n"
    "end\n"
    );
  // 09_rpg_moveroute.rb
  rb_eval_string(
    "class RPG::MoveRoute\n"
    "  def initialize\n"
    "    @repeat = true\n"
    "    @skippable = false\n"
    "    @wait = false\n"
    "    @list = [RPG::MoveCommand.new]\n"
    "  end\n"
    "  attr_accessor :repeat\n"
    "  attr_accessor :skippable\n"
    "  attr_accessor :wait\n"
    "  attr_accessor :list\n"
    "end\n"
    );
  // 10_rpg_movecommand.rb
  rb_eval_string(
    "class RPG::MoveCommand\n"
    "  def initialize(code = 0, parameters = [])\n"
    "    @code = code\n"
    "    @parameters = parameters\n"
    "  end\n"
    "  attr_accessor :code\n"
    "  attr_accessor :parameters\n"
    "end\n"
    );
  // 11_rpg_baseitem.rb
  rb_eval_string(
    "class RPG::BaseItem\n"
    "  def initialize\n"
    "    @id = 0\n"
    "    @name = ''\n"
    "    @icon_index = 0\n"
    "    @description = ''\n"
    "    @features = []\n"
    "    @note = ''\n"
    "  end\n"
    "  attr_accessor :id\n"
    "  attr_accessor :name\n"
    "  attr_accessor :icon_index\n"
    "  attr_accessor :description\n"
    "  attr_accessor :features\n"
    "  attr_accessor :note\n"
    "end\n"
    );
  // 12_rpg_actor.rb
  rb_eval_string(
    "class RPG::Actor < RPG::BaseItem\n"
    "  def initialize\n"
    "    super\n"
    "    @nickname = ''\n"
    "    @class_id = 1\n"
    "    @initial_level = 1\n"
    "    @max_level = 99\n"
    "    @character_name = ''\n"
    "    @character_index = 0\n"
    "    @face_name = ''\n"
    "    @face_index = 0\n"
    "    @equips = [0,0,0,0,0]\n"
    "  end\n"
    "  attr_accessor :nickname\n"
    "  attr_accessor :class_id\n"
    "  attr_accessor :initial_level\n"
    "  attr_accessor :max_level\n"
    "  attr_accessor :character_name\n"
    "  attr_accessor :character_index\n"
    "  attr_accessor :face_name\n"
    "  attr_accessor :face_index\n"
    "  attr_accessor :equips\n"
    "end\n"
    );
  // 13_rpg_class.rb
  rb_eval_string(
    "class RPG::Class < RPG::BaseItem\n"
    "  def initialize\n"
    "    super\n"
    "    @exp_params = [30,20,30,30]\n"
    "    @params = Table.new(8,100)\n"
    "    (1..99).each do |i|\n"
    "      @params[0,i] = 400+i*50\n"
    "      @params[1,i] = 80+i*10\n"
    "      (2..5).each {|j| @params[j,i] = 15+i*5/4 }\n"
    "      (6..7).each {|j| @params[j,i] = 30+i*5/2 }\n"
    "    end\n"
    "    @learnings = []\n"
    "    @features.push(RPG::BaseItem::Feature.new(23, 0, 1))\n"
    "    @features.push(RPG::BaseItem::Feature.new(22, 0, 0.95))\n"
    "    @features.push(RPG::BaseItem::Feature.new(22, 1, 0.05))\n"
    "    @features.push(RPG::BaseItem::Feature.new(22, 2, 0.04))\n"
    "    @features.push(RPG::BaseItem::Feature.new(41, 1))\n"
    "    @features.push(RPG::BaseItem::Feature.new(51, 1))\n"
    "    @features.push(RPG::BaseItem::Feature.new(52, 1))\n"
    "  end\n"
    "  def exp_for_level(level)\n"
    "    lv = level.to_f\n"
    "    basis = @exp_params[0].to_f\n"
    "    extra = @exp_params[1].to_f\n"
    "    acc_a = @exp_params[2].to_f\n"
    "    acc_b = @exp_params[3].to_f\n"
    "    return (basis*((lv-1)**(0.9+acc_a/250))*lv*(lv+1)/\n"
    "      (6+lv**2/50/acc_b)+(lv-1)*extra).round.to_i\n"
    "  end\n"
    "  attr_accessor :exp_params\n"
    "  attr_accessor :params\n"
    "  attr_accessor :learnings\n"
    "end\n"
    );
  // 14_rpg_usableitem.rb
  rb_eval_string(
    "class RPG::UsableItem < RPG::BaseItem\n"
    "  def initialize\n"
    "    super\n"
    "    @scope = 0\n"
    "    @occasion = 0\n"
    "    @speed = 0\n"
    "    @success_rate = 100\n"
    "    @repeats = 1\n"
    "    @tp_gain = 0\n"
    "    @hit_type = 0\n"
    "    @animation_id = 0\n"
    "    @damage = RPG::UsableItem::Damage.new\n"
    "    @effects = []\n"
    "  end\n"
    "  def for_opponent?\n"
    "    [1, 2, 3, 4, 5, 6].include?(@scope)\n"
    "  end\n"
    "  def for_friend?\n"
    "    [7, 8, 9, 10, 11].include?(@scope)\n"
    "  end\n"
    "  def for_dead_friend?\n"
    "    [9, 10].include?(@scope)\n"
    "  end\n"
    "  def for_user?\n"
    "    @scope == 11\n"
    "  end\n"
    "  def for_one?\n"
    "    [1, 3, 7, 9, 11].include?(@scope)\n"
    "  end\n"
    "  def for_random?\n"
    "    [3, 4, 5, 6].include?(@scope)\n"
    "  end\n"
    "  def number_of_targets\n"
    "    for_random? ? @scope - 2 : 0\n"
    "  end\n"
    "  def for_all?\n"
    "    [2, 8, 10].include?(@scope)\n"
    "  end\n"
    "  def need_selection?\n"
    "    [1, 7, 9].include?(@scope)\n"
    "  end\n"
    "  def battle_ok?\n"
    "    [0, 1].include?(@occasion)\n"
    "  end\n"
    "  def menu_ok?\n"
    "    [0, 2].include?(@occasion)\n"
    "  end\n"
    "  def certain?\n"
    "    @hit_type == 0\n"
    "  end\n"
    "  def physical?\n"
    "    @hit_type == 1\n"
    "  end\n"
    "  def magical?\n"
    "    @hit_type == 2\n"
    "  end\n"
    "  attr_accessor :scope\n"
    "  attr_accessor :occasion\n"
    "  attr_accessor :speed\n"
    "  attr_accessor :animation_id\n"
    "  attr_accessor :success_rate\n"
    "  attr_accessor :repeats\n"
    "  attr_accessor :tp_gain\n"
    "  attr_accessor :hit_type\n"
    "  attr_accessor :damage\n"
    "  attr_accessor :effects\n"
    "end\n"
    );
  // 15_rpg_skill.rb
  rb_eval_string(
    "class RPG::Skill < RPG::UsableItem\n"
    "  def initialize\n"
    "    super\n"
    "    @scope = 1\n"
    "    @stype_id = 1\n"
    "    @mp_cost = 0\n"
    "    @tp_cost = 0\n"
    "    @message1 = ''\n"
    "    @message2 = ''\n"
    "    @required_wtype_id1 = 0\n"
    "    @required_wtype_id2 = 0\n"
    "  end\n"
    "  attr_accessor :stype_id\n"
    "  attr_accessor :mp_cost\n"
    "  attr_accessor :tp_cost\n"
    "  attr_accessor :message1\n"
    "  attr_accessor :message2\n"
    "  attr_accessor :required_wtype_id1\n"
    "  attr_accessor :required_wtype_id2\n"
    "end\n"
    );
  // 16_rpg_item.rb
  rb_eval_string(
    "class RPG::Item < RPG::UsableItem\n"
    "  def initialize\n"
    "    super\n"
    "    @scope = 7\n"
    "    @itype_id = 1\n"
    "    @price = 0\n"
    "    @consumable = true\n"
    "  end\n"
    "  def key_item?\n"
    "    @itype_id == 2\n"
    "  end\n"
    "  attr_accessor :itype_id\n"
    "  attr_accessor :price\n"
    "  attr_accessor :consumable\n"
    "end\n"
    );
  // 17_rpg_equipitem.rb
  rb_eval_string(
    "class RPG::EquipItem < RPG::BaseItem\n"
    "  def initialize\n"
    "    super\n"
    "    @price = 0\n"
    "    @etype_id = 0\n"
    "    @params = [0] * 8\n"
    "  end\n"
    "  attr_accessor :price\n"
    "  attr_accessor :etype_id\n"
    "  attr_accessor :params\n"
    "end\n"
    );
  // 18_rpg_weapon.rb
  rb_eval_string(
    "class RPG::Weapon < RPG::EquipItem\n"
    "  def initialize\n"
    "    super\n"
    "    @wtype_id = 0\n"
    "    @animation_id = 0\n"
    "    @features.push(RPG::BaseItem::Feature.new(31, 1, 0))\n"
    "    @features.push(RPG::BaseItem::Feature.new(22, 0, 0))\n"
    "  end\n"
    "  def performance\n"
    "    params[2] + params[4] + params.inject(0) {|r, v| r += v }\n"
    "  end\n"
    "  attr_accessor :wtype_id\n"
    "  attr_accessor :animation_id\n"
    "end\n"
    );
  // 19_rpg_armor.rb
  rb_eval_string(
    "class RPG::Armor < RPG::EquipItem\n"
    "  def initialize\n"
    "    super\n"
    "    @atype_id = 0\n"
    "    @etype_id = 1\n"
    "    @features.push(RPG::BaseItem::Feature.new(22, 1, 0))\n"
    "  end\n"
    "  def performance\n"
    "    params[3] + params[5] + params.inject(0) {|r, v| r += v }\n"
    "  end\n"
    "  attr_accessor :atype_id\n"
    "end\n"
    );
  // 20_rpg_enemy.rb
  rb_eval_string(
    "class RPG::Enemy < RPG::BaseItem\n"
    "  def initialize\n"
    "    super\n"
    "    @battler_name = ''\n"
    "    @battler_hue = 0\n"
    "    @params = [100,0,10,10,10,10,10,10]\n"
    "    @exp = 0\n"
    "    @gold = 0\n"
    "    @drop_items = Array.new(3) { RPG::Enemy::DropItem.new }\n"
    "    @actions = [RPG::Enemy::Action.new]\n"
    "    @features.push(RPG::BaseItem::Feature.new(22, 0, 0.95))\n"
    "    @features.push(RPG::BaseItem::Feature.new(22, 1, 0.05))\n"
    "    @features.push(RPG::BaseItem::Feature.new(31, 1, 0))\n"
    "  end\n"
    "  attr_accessor :battler_name\n"
    "  attr_accessor :battler_hue\n"
    "  attr_accessor :params\n"
    "  attr_accessor :exp\n"
    "  attr_accessor :gold\n"
    "  attr_accessor :drop_items\n"
    "  attr_accessor :actions\n"
    "end\n"
    );
  // 21_rpg_state.rb
  rb_eval_string(
    "class RPG::State < RPG::BaseItem\n"
    "  def initialize\n"
    "    super\n"
    "    @restriction = 0\n"
    "    @priority = 50\n"
    "    @remove_at_battle_end = false\n"
    "    @remove_by_restriction = false\n"
    "    @auto_removal_timing = 0\n"
    "    @min_turns = 1\n"
    "    @max_turns = 1\n"
    "    @remove_by_damage = false\n"
    "    @chance_by_damage = 100\n"
    "    @remove_by_walking = false\n"
    "    @steps_to_remove = 100\n"
    "    @message1 = ''\n"
    "    @message2 = ''\n"
    "    @message3 = ''\n"
    "    @message4 = ''\n"
    "  end\n"
    "  attr_accessor :restriction\n"
    "  attr_accessor :priority\n"
    "  attr_accessor :remove_at_battle_end\n"
    "  attr_accessor :remove_by_restriction\n"
    "  attr_accessor :auto_removal_timing\n"
    "  attr_accessor :min_turns\n"
    "  attr_accessor :max_turns\n"
    "  attr_accessor :remove_by_damage\n"
    "  attr_accessor :chance_by_damage\n"
    "  attr_accessor :remove_by_walking\n"
    "  attr_accessor :steps_to_remove\n"
    "  attr_accessor :message1\n"
    "  attr_accessor :message2\n"
    "  attr_accessor :message3\n"
    "  attr_accessor :message4\n"
    "end\n"
    );
  // 22_rpg_class_learning.rb
  rb_eval_string(
    "class RPG::Class::Learning\n"
    "  def initialize\n"
    "    @level = 1\n"
    "    @skill_id = 1\n"
    "    @note = ''\n"
    "  end\n"
    "  attr_accessor :level\n"
    "  attr_accessor :skill_id\n"
    "  attr_accessor :note\n"
    "end\n"
    );
  // 23_rpg_baseitem_feature.rb
  rb_eval_string(
    "class RPG::BaseItem::Feature\n"
    "  def initialize(code = 0, data_id = 0, value = 0)\n"
    "    @code = code\n"
    "    @data_id = data_id\n"
    "    @value = value\n"
    "  end\n"
    "  attr_accessor :code\n"
    "  attr_accessor :data_id\n"
    "  attr_accessor :value\n"
    "end\n"
    );
  // 24_rpg_usableitem_damage.rb
  rb_eval_string(
    "class RPG::UsableItem::Damage\n"
    "  def initialize\n"
    "    @type = 0\n"
    "    @element_id = 0\n"
    "    @formula = '0'\n"
    "    @variance = 20\n"
    "    @critical = false\n"
    "  end\n"
    "  def none?\n"
    "    @type == 0\n"
    "  end\n"
    "  def to_hp?\n"
    "    [1,3,5].include?(@type)\n"
    "  end\n"
    "  def to_mp?\n"
    "    [2,4,6].include?(@type)\n"
    "  end\n"
    "  def recover?\n"
    "    [3,4].include?(@type)\n"
    "  end\n"
    "  def drain?\n"
    "    [5,6].include?(@type)\n"
    "  end\n"
    "  def sign\n"
    "    recover? ? -1 : 1\n"
    "  end\n"
    "  def eval(a, b, v)\n"
    "    [Kernel.eval(@formula), 0].max * sign rescue 0\n"
    "  end\n"
    "  attr_accessor :type\n"
    "  attr_accessor :element_id\n"
    "  attr_accessor :formula\n"
    "  attr_accessor :variance\n"
    "  attr_accessor :critical\n"
    "end\n"
    );
  // 25_rpg_usableitem_effect.rb
  rb_eval_string(
    "class RPG::UsableItem::Effect\n"
    "  def initialize(code = 0, data_id = 0, value1 = 0, value2 = 0)\n"
    "    @code = code\n"
    "    @data_id = data_id\n"
    "    @value1 = value1\n"
    "    @value2 = value2\n"
    "  end\n"
    "  attr_accessor :code\n"
    "  attr_accessor :data_id\n"
    "  attr_accessor :value1\n"
    "  attr_accessor :value2\n"
    "end\n"
    );
  // 26_rpg_enemy_dropitem.rb
  rb_eval_string(
    "class RPG::Enemy::DropItem\n"
    "  def initialize\n"
    "    @kind = 0\n"
    "    @data_id = 1\n"
    "    @denominator = 1\n"
    "  end\n"
    "  attr_accessor :kind\n"
    "  attr_accessor :data_id\n"
    "  attr_accessor :denominator\n"
    "end\n"
    );
  // 27_rpg_enemy_action.rb
  rb_eval_string(
    "class RPG::Enemy::Action\n"
    "  def initialize\n"
    "    @skill_id = 1\n"
    "    @condition_type = 0\n"
    "    @condition_param1 = 0\n"
    "    @condition_param2 = 0\n"
    "    @rating = 5\n"
    "  end\n"
    "  attr_accessor :skill_id\n"
    "  attr_accessor :condition_type\n"
    "  attr_accessor :condition_param1\n"
    "  attr_accessor :condition_param2\n"
    "  attr_accessor :rating\n"
    "end\n"
    );
  // 28_rpg_troop.rb
  rb_eval_string(
    "class RPG::Troop\n"
    "  def initialize\n"
    "    @id = 0\n"
    "    @name = ''\n"
    "    @members = []\n"
    "    @pages = [RPG::Troop::Page.new]\n"
    "  end\n"
    "  attr_accessor :id\n"
    "  attr_accessor :name\n"
    "  attr_accessor :members\n"
    "  attr_accessor :pages\n"
    "end\n"
    );
  // 29_rpg_troop_member.rb
  rb_eval_string(
    "class RPG::Troop::Member\n"
    "  def initialize\n"
    "    @enemy_id = 1\n"
    "    @x = 0\n"
    "    @y = 0\n"
    "    @hidden = false\n"
    "  end\n"
    "  attr_accessor :enemy_id\n"
    "  attr_accessor :x\n"
    "  attr_accessor :y\n"
    "  attr_accessor :hidden\n"
    "end\n"
    );
  // 30_rpg_troop_page.rb
  rb_eval_string(
    "class RPG::Troop::Page\n"
    "  def initialize\n"
    "    @condition = RPG::Troop::Page::Condition.new\n"
    "    @span = 0\n"
    "    @list = [RPG::EventCommand.new]\n"
    "  end\n"
    "  attr_accessor :condition\n"
    "  attr_accessor :span\n"
    "  attr_accessor :list\n"
    "end\n"
    );
  // 31_rpg_troop_page_condition.rb
  rb_eval_string(
    "class RPG::Troop::Page::Condition\n"
    "  def initialize\n"
    "    @turn_ending = false\n"
    "    @turn_valid = false\n"
    "    @enemy_valid = false\n"
    "    @actor_valid = false\n"
    "    @switch_valid = false\n"
    "    @turn_a = 0\n"
    "    @turn_b = 0\n"
    "    @enemy_index = 0\n"
    "    @enemy_hp = 50\n"
    "    @actor_id = 1\n"
    "    @actor_hp = 50\n"
    "    @switch_id = 1\n"
    "  end\n"
    "  attr_accessor :turn_ending\n"
    "  attr_accessor :turn_valid\n"
    "  attr_accessor :enemy_valid\n"
    "  attr_accessor :actor_valid\n"
    "  attr_accessor :switch_valid\n"
    "  attr_accessor :turn_a\n"
    "  attr_accessor :turn_b\n"
    "  attr_accessor :enemy_index\n"
    "  attr_accessor :enemy_hp\n"
    "  attr_accessor :actor_id\n"
    "  attr_accessor :actor_hp\n"
    "  attr_accessor :switch_id\n"
    "end\n"
    );
  // 32_rpg_animation.rb
  rb_eval_string(
    "class RPG::Animation\n"
    "  def initialize\n"
    "    @id = 0\n"
    "    @name = ''\n"
    "    @animation1_name = ''\n"
    "    @animation1_hue = 0\n"
    "    @animation2_name = ''\n"
    "    @animation2_hue = 0\n"
    "    @position = 1\n"
    "    @frame_max = 1\n"
    "    @frames = [RPG::Animation::Frame.new]\n"
    "    @timings = []\n"
    "  end\n"
    "  def to_screen?\n"
    "    @position == 3\n"
    "  end\n"
    "  attr_accessor :id\n"
    "  attr_accessor :name\n"
    "  attr_accessor :animation1_name\n"
    "  attr_accessor :animation1_hue\n"
    "  attr_accessor :animation2_name\n"
    "  attr_accessor :animation2_hue\n"
    "  attr_accessor :position\n"
    "  attr_accessor :frame_max\n"
    "  attr_accessor :frames\n"
    "  attr_accessor :timings\n"
    "end\n"
    );
  // 33_rpg_animation_frame.rb
  rb_eval_string(
    "class RPG::Animation::Frame\n"
    "  def initialize\n"
    "    @cell_max = 0\n"
    "    @cell_data = Table.new(0, 0)\n"
    "  end\n"
    "  attr_accessor :cell_max\n"
    "  attr_accessor :cell_data\n"
    "end\n"
    );
  // 34_rpg_animation_timing.rb
  rb_eval_string(
    "class RPG::Animation::Timing\n"
    "  def initialize\n"
    "    @frame = 0\n"
    "    @se = RPG::SE.new('', 80)\n"
    "    @flash_scope = 0\n"
    "    @flash_color = Color.new(255,255,255,255)\n"
    "    @flash_duration = 5\n"
    "  end\n"
    "  attr_accessor :frame\n"
    "  attr_accessor :se\n"
    "  attr_accessor :flash_scope\n"
    "  attr_accessor :flash_color\n"
    "  attr_accessor :flash_duration\n"
    "end\n"
    );
  // 35_rpg_tileset.rb
  rb_eval_string(
    "class RPG::Tileset\n"
    "  def initialize\n"
    "    @id = 0\n"
    "    @mode = 1\n"
    "    @name = ''\n"
    "    @tileset_names = Array.new(9).collect{''}\n"
    "    @flags = Table.new(8192)\n"
    "    @flags[0] = 0x0010\n"
    "    (2048..2815).each {|i| @flags[i] = 0x000F}\n"
    "    (4352..8191).each {|i| @flags[i] = 0x000F}\n"
    "    @note = ''\n"
    "  end\n"
    "  attr_accessor :id\n"
    "  attr_accessor :mode\n"
    "  attr_accessor :name\n"
    "  attr_accessor :tileset_names\n"
    "  attr_accessor :flags\n"
    "  attr_accessor :note\n"
    "end\n"
    );
  // 36_rpg_commonevent.rb
  rb_eval_string(
    "class RPG::CommonEvent\n"
    "  def initialize\n"
    "    @id = 0\n"
    "    @name = ''\n"
    "    @trigger = 0\n"
    "    @switch_id = 1\n"
    "    @list = [RPG::EventCommand.new]\n"
    "  end\n"
    "  def autorun?\n"
    "    @trigger == 1\n"
    "  end\n"
    "  def parallel?\n"
    "    @trigger == 2\n"
    "  end\n"
    "  attr_accessor :id\n"
    "  attr_accessor :name\n"
    "  attr_accessor :trigger\n"
    "  attr_accessor :switch_id\n"
    "  attr_accessor :list\n"
    "end\n"
    );
  // 37_rpg_system.rb
  rb_eval_string(
    "class RPG::System\n"
    "  def initialize\n"
    "    @game_title = ''\n"
    "    @version_id = 0\n"
    "    @japanese = true\n"
    "    @party_members = [1]\n"
    "    @currency_unit = ''\n"
    "    @elements = [nil, '']\n"
    "    @skill_types = [nil, '']\n"
    "    @weapon_types = [nil, '']\n"
    "    @armor_types = [nil, '']\n"
    "    @switches = [nil, '']\n"
    "    @variables = [nil, '']\n"
    "    @boat = RPG::System::Vehicle.new\n"
    "    @ship = RPG::System::Vehicle.new\n"
    "    @airship = RPG::System::Vehicle.new\n"
    "    @title1_name = ''\n"
    "    @title2_name = ''\n"
    "    @opt_draw_title = true\n"
    "    @opt_use_midi = false\n"
    "    @opt_transparent = false\n"
    "    @opt_followers = true\n"
    "    @opt_slip_death = false\n"
    "    @opt_floor_death = false\n"
    "    @opt_display_tp = true\n"
    "    @opt_extra_exp = false\n"
    "    @window_tone = Tone.new(0,0,0)\n"
    "    @title_bgm = RPG::BGM.new\n"
    "    @battle_bgm = RPG::BGM.new\n"
    "    @battle_end_me = RPG::ME.new\n"
    "    @gameover_me = RPG::ME.new\n"
    "    @sounds = Array.new(24) { RPG::SE.new }\n"
    "    @test_battlers = []\n"
    "    @test_troop_id = 1\n"
    "    @start_map_id = 1\n"
    "    @start_x = 0\n"
    "    @start_y = 0\n"
    "    @terms = RPG::System::Terms.new\n"
    "    @battleback1_name = ''\n"
    "    @battleback2_name = ''\n"
    "    @battler_name = ''\n"
    "    @battler_hue = 0\n"
    "    @edit_map_id = 1\n"
    "  end\n"
    "  attr_accessor :game_title\n"
    "  attr_accessor :version_id\n"
    "  attr_accessor :japanese\n"
    "  attr_accessor :party_members\n"
    "  attr_accessor :currency_unit\n"
    "  attr_accessor :skill_types\n"
    "  attr_accessor :weapon_types\n"
    "  attr_accessor :armor_types\n"
    "  attr_accessor :elements\n"
    "  attr_accessor :switches\n"
    "  attr_accessor :variables\n"
    "  attr_accessor :boat\n"
    "  attr_accessor :ship\n"
    "  attr_accessor :airship\n"
    "  attr_accessor :title1_name\n"
    "  attr_accessor :title2_name\n"
    "  attr_accessor :opt_draw_title\n"
    "  attr_accessor :opt_use_midi\n"
    "  attr_accessor :opt_transparent\n"
    "  attr_accessor :opt_followers\n"
    "  attr_accessor :opt_slip_death\n"
    "  attr_accessor :opt_floor_death\n"
    "  attr_accessor :opt_display_tp\n"
    "  attr_accessor :opt_extra_exp\n"
    "  attr_accessor :window_tone\n"
    "  attr_accessor :title_bgm\n"
    "  attr_accessor :battle_bgm\n"
    "  attr_accessor :battle_end_me\n"
    "  attr_accessor :gameover_me\n"
    "  attr_accessor :sounds\n"
    "  attr_accessor :test_battlers\n"
    "  attr_accessor :test_troop_id\n"
    "  attr_accessor :start_map_id\n"
    "  attr_accessor :start_x\n"
    "  attr_accessor :start_y\n"
    "  attr_accessor :terms\n"
    "  attr_accessor :battleback1_name\n"
    "  attr_accessor :battleback2_name\n"
    "  attr_accessor :battler_name\n"
    "  attr_accessor :battler_hue\n"
    "  attr_accessor :edit_map_id\n"
    "end\n"
    );
  // 38_rpg_system_vehicle.rb
  rb_eval_string(
    "class RPG::System::Vehicle\n"
    "  def initialize\n"
    "    @character_name = ''\n"
    "    @character_index = 0\n"
    "    @bgm = RPG::BGM.new\n"
    "    @start_map_id = 0\n"
    "    @start_x = 0\n"
    "    @start_y = 0\n"
    "  end\n"
    "  attr_accessor :character_name\n"
    "  attr_accessor :character_index\n"
    "  attr_accessor :bgm\n"
    "  attr_accessor :start_map_id\n"
    "  attr_accessor :start_x\n"
    "  attr_accessor :start_y\n"
    "end\n"
    );
  // 39_rpg_system_terms.rb
  rb_eval_string(
    "class RPG::System::Terms\n"
    "  def initialize\n"
    "    @basic = Array.new(8) {''}\n"
    "    @params = Array.new(8) {''}\n"
    "    @etypes = Array.new(5) {''}\n"
    "    @commands = Array.new(23) {''}\n"
    "  end\n"
    "  attr_accessor :basic\n"
    "  attr_accessor :params\n"
    "  attr_accessor :etypes\n"
    "  attr_accessor :commands\n"
    "end\n"
    );
  // 40_rpg_system_testbattler.rb
  rb_eval_string(
    "class RPG::System::TestBattler\n"
    "  def initialize\n"
    "    @actor_id = 1\n"
    "    @level = 1\n"
    "    @equips = [0,0,0,0,0]\n"
    "  end\n"
    "  attr_accessor :actor_id\n"
    "  attr_accessor :level\n"
    "  attr_accessor :equips\n"
    "end\n"
    );
  // 41_rpg_audiofile.rb
  rb_eval_string(
    "class RPG::AudioFile\n"
    "  def initialize(name = '', volume = 100, pitch = 100)\n"
    "    @name = name\n"
    "    @volume = volume\n"
    "    @pitch = pitch\n"
    "  end\n"
    "  attr_accessor :name\n"
    "  attr_accessor :volume\n"
    "  attr_accessor :pitch\n"
    "end\n"
    );
  // 42_rpg_bgm.rb
  rb_eval_string(
    "class RPG::BGM < RPG::AudioFile\n"
    "  @@last = RPG::BGM.new\n"
    "  def play(pos = 0)\n"
    "    if @name.empty?\n"
    "      Audio.bgm_stop\n"
    "      @@last = RPG::BGM.new\n"
    "    else\n"
    "      Audio.bgm_play('Audio/BGM/' + @name, @volume, @pitch, pos)\n"
    "      @@last = self.clone\n"
    "    end\n"
    "  end\n"
    "  def replay\n"
    "    play(@pos)\n"
    "  end\n"
    "  def self.stop\n"
    "    Audio.bgm_stop\n"
    "    @@last = RPG::BGM.new\n"
    "  end\n"
    "  def self.fade(time)\n"
    "    Audio.bgm_fade(time)\n"
    "    @@last = RPG::BGM.new\n"
    "  end\n"
    "  def self.last\n"
    "    @@last.pos = Audio.bgm_pos\n"
    "    @@last\n"
    "  end\n"
    "  attr_accessor :pos\n"
    "end\n"
    );
  // 43_rpg_bgs.rb
  rb_eval_string(
    "class RPG::BGS < RPG::AudioFile\n"
    "  @@last = RPG::BGS.new\n"
    "  def play(pos = 0)\n"
    "    if @name.empty?\n"
    "      Audio.bgs_stop\n"
    "      @@last = RPG::BGS.new\n"
    "    else\n"
    "      Audio.bgs_play('Audio/BGS/' + @name, @volume, @pitch, pos)\n"
    "      @@last = self.clone\n"
    "    end\n"
    "  end\n"
    "  def replay\n"
    "    play(@pos)\n"
    "  end\n"
    "  def self.stop\n"
    "    Audio.bgs_stop\n"
    "    @@last = RPG::BGS.new\n"
    "  end\n"
    "  def self.fade(time)\n"
    "    Audio.bgs_fade(time)\n"
    "    @@last = RPG::BGS.new\n"
    "  end\n"
    "  def self.last\n"
    "    @@last.pos = Audio.bgs_pos\n"
    "    @@last\n"
    "  end\n"
    "  attr_accessor :pos\n"
    "end\n"
    );
  // 44_rpg_me.rb
  rb_eval_string(
    "class RPG::ME < RPG::AudioFile\n"
    "  def play\n"
    "    if @name.empty?\n"
    "      Audio.me_stop\n"
    "    else\n"
    "      Audio.me_play('Audio/ME/' + @name, @volume, @pitch)\n"
    "    end\n"
    "  end\n"
    "  def self.stop\n"
    "    Audio.me_stop\n"
    "  end\n"
    "  def self.fade(time)\n"
    "    Audio.me_fade(time)\n"
    "  end\n"
    "end\n"
    );
  // 45_rpg_se.rb
  rb_eval_string(
    "class RPG::SE < RPG::AudioFile\n"
    "  def play\n"
    "    unless @name.empty?\n"
    "      Audio.se_play('Audio/SE/' + @name, @volume, @pitch)\n"
    "    end\n"
    "  end\n"
    "  def self.stop\n"
    "    Audio.se_stop\n"
    "  end\n"
    "end\n"
    );
}
